import tkinter as tk
from tkinter import messagebox, Scrollbar, Button
import random
import time
import threading
import couchdb
from tkinter.ttk import Treeview

couch = couchdb.Server('http://admin:admin@localhost:5984')  # Ustawienia połączenia, admin i hasło
db_name = 'http_logs'

if db_name in couch:
    db = couch[db_name]
else:
    db = couch.create(db_name)

tree = None
text_logs = None

def generuj_log_http():
    global tree, text_logs

    while True:
        czas = time.strftime("%d/%b/%Y:%H:%M:%S %z")
        adres = random.choice(["/page1", "/page2", "/page3"])
        metoda = random.choice(["GET", "POST", "PUT", "DELETE"])
        status = random.choice([200, 301, 404, 500])
        rozmiar = random.randint(100, 10000)
        typ_logu = "error" if status >= 400 else "info"

        zapisz_log_do_couchdb(czas, adres, metoda, status, rozmiar, typ_logu)

        if tree:
            log_info = f'{czas} - "GET {adres} HTTP/1.1" {status} {rozmiar}'
            if typ_logu == "error":
                tree.insert('', tk.END, values=(czas, adres, metoda, status, rozmiar), tags=('error',))
            else:
                tree.insert('', tk.END, values=(czas, adres, metoda, status, rozmiar))

            root.after(100, tree.yview_moveto, 1.0)
            root.update_idletasks()

        if text_logs:
            log_text = f'{czas} - "GET {adres} HTTP/1.1" {status} {rozmiar}\n'
            text_logs.insert(tk.END, log_text)
            text_logs.see(tk.END)

        time.sleep(random.uniform(1, 3))


def zapisz_log_do_couchdb(czas, adres, metoda, status, rozmiar, typ_logu):
    log = {
        'czas': czas,
        'adres': adres,
        'metoda': metoda,
        'status': status,
        'rozmiar': rozmiar,
        'typ_logu': typ_logu
    }
    try:
        db.save(log)
        print("Log HTTP został pomyślnie zapisany do CouchDB.")
    except Exception as e:
        print(f"Błąd przy zapisywaniu logu HTTP do CouchDB: {e}")


def sortuj_po_kolumnie(col):
    global tree
    if tree:
        data = [(tree.set(child, col), child) for child in tree.get_children('')]
        data.sort(key=lambda t: t[0])
        for index, (val, child) in enumerate(data):
            tree.move(child, '', index)
        tree.heading(col, command=lambda: sortuj_po_kolumnie(col))


def historia_logow():
    global tree

    top = tk.Toplevel()
    top.title("Historia logów")

    scrollbar = Scrollbar(top)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    tree = Treeview(top, columns=('czas', 'adres', 'metoda', 'status', 'rozmiar'), show='headings',
                    yscrollcommand=scrollbar.set)

    tree.heading('czas', text='Czas', command=lambda: sortuj_po_kolumnie('czas'))
    tree.heading('adres', text='Adres', command=lambda: sortuj_po_kolumnie('adres'))
    tree.heading('metoda', text='Metoda', command=lambda: sortuj_po_kolumnie('metoda'))
    tree.heading('status', text='Status', command=lambda: sortuj_po_kolumnie('status'))
    tree.heading('rozmiar', text='Rozmiar', command=lambda: sortuj_po_kolumnie('rozmiar'))

    tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
    scrollbar.config(command=tree.yview)

    try:
        # Pobranie wszystkich dokumentów z bazy
        logs = db.view('_all_docs', include_docs=True)

        # Wyświetlenie logów w oknie
        for log in logs:
            czas = log['doc']['czas']
            adres = log['doc']['adres']
            metoda = log['doc']['metoda']
            status = log['doc']['status']
            rozmiar = log['doc']['rozmiar']
            typ_logu = "error" if status >= 400 else "info"

            if typ_logu == "error":
                tree.insert('', tk.END, values=(czas, adres, metoda, status, rozmiar), tags=('error',))
            else:
                tree.insert('', tk.END, values=(czas, adres, metoda, status, rozmiar))

    except Exception as e:
        print(f"Błąd przy wyświetlaniu historii logów: {e}")
        messagebox.showerror("Błąd", f"Błąd przy wyświetlaniu historii logów: {e}")

    # Przycisk do zapisywania historii logów do pliku .log
    def zapisz_do_pliku_log():
        try:
            logs = db.view('_all_docs', include_docs=True)
            with open('historia_logow.log', 'w') as file:
                for log in logs:
                    czas = log['doc']['czas']
                    adres = log['doc']['adres']
                    status = log['doc']['status']
                    rozmiar = log['doc']['rozmiar']
                    log_info = f"{czas} - \"GET {adres} HTTP/1.1\" {status} {rozmiar}\n"
                    file.write(log_info)
            messagebox.showinfo("Zapisano", "Historia logów została zapisana do pliku historia_logow.log.")
        except Exception as e:
            print(f"Błąd przy zapisywaniu do pliku: {e}")
            messagebox.showerror("Błąd", f"Błąd przy zapisywaniu do pliku: {e}")

    button_zapisz = tk.Button(top, text="Zapisz do pliku", command=zapisz_do_pliku_log)
    button_zapisz.pack(pady=10)


root = tk.Tk()
root.title("Aplikacja logów HTTP")

text_logs = tk.Text(root, height=20, width=80)
text_logs.grid(row=0, column=0, columnspan=3, padx=10, pady=10)

button_historia = tk.Button(root, text="Historia logów", command=historia_logow)
button_historia.grid(row=1,column=0, padx=10, pady=10)

threading.Thread(target=generuj_log_http, daemon=True).start()

root.mainloop()
